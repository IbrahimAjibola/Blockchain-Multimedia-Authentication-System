terraform {
  required_version = ">= 1.0"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 4.0"
    }
    google-beta = {
      source  = "hashicorp/google-beta"
      version = "~> 4.0"
    }
  }
}

provider "google" {
  project = var.project_id
  region  = var.region
}

provider "google-beta" {
  project = var.project_id
  region  = var.region
}

# Variables
variable "project_id" {
  description = "The ID of the project to deploy to"
  type        = string
}

variable "region" {
  description = "The region to deploy to"
  type        = string
  default     = "us-central1"
}

variable "zone" {
  description = "The zone to deploy to"
  type        = string
  default     = "us-central1-a"
}

variable "domain_name" {
  description = "The domain name for the application"
  type        = string
  default     = "your-domain.com"
}

# VPC Network
resource "google_compute_network" "vpc" {
  name                    = "multimedia-auth-vpc"
  auto_create_subnetworks = false
}

# Subnet
resource "google_compute_subnetwork" "subnet" {
  name          = "multimedia-auth-subnet"
  ip_cidr_range = "10.0.0.0/24"
  region        = var.region
  network       = google_compute_network.vpc.id
}

# Firewall rules
resource "google_compute_firewall" "allow_http" {
  name    = "allow-http"
  network = google_compute_network.vpc.id

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_ranges = ["0.0.0.0/0"]
  target_tags   = ["http-server"]
}

resource "google_compute_firewall" "allow_https" {
  name    = "allow-https"
  network = google_compute_network.vpc.id

  allow {
    protocol = "tcp"
    ports    = ["443"]
  }

  source_ranges = ["0.0.0.0/0"]
  target_tags   = ["https-server"]
}

resource "google_compute_firewall" "allow_internal" {
  name    = "allow-internal"
  network = google_compute_network.vpc.id

  allow {
    protocol = "tcp"
    ports    = ["5000", "27017", "6379"]
  }

  source_ranges = ["10.0.0.0/24"]
}

# Cloud SQL Instance (MongoDB)
resource "google_sql_database_instance" "mongodb" {
  name             = "multimedia-auth-mongodb"
  database_version = "MYSQL_8_0" # Using MySQL as MongoDB alternative
  region           = var.region

  settings {
    tier = "db-f1-micro"
    
    backup_configuration {
      enabled    = true
      start_time = "02:00"
    }

    ip_configuration {
      ipv4_enabled    = true
      private_network = google_compute_network.vpc.id
    }
  }

  deletion_protection = false
}

# Cloud SQL Database
resource "google_sql_database" "database" {
  name     = "multimedia_auth"
  instance = google_sql_database_instance.mongodb.name
}

# Cloud SQL User
resource "google_sql_user" "users" {
  name     = "multimedia-auth-user"
  instance = google_sql_database_instance.mongodb.name
  password = var.db_password
}

# Cloud Storage Bucket
resource "google_storage_bucket" "multimedia_files" {
  name          = "multimedia-auth-files-${var.project_id}"
  location      = var.region
  force_destroy = false

  uniform_bucket_level_access = true

  lifecycle_rule {
    condition {
      age = 30
    }
    action {
      type = "Delete"
    }
  }
}

# Cloud Run Service
resource "google_cloud_run_service" "backend" {
  name     = "multimedia-auth-backend"
  location = var.region

  template {
    spec {
      containers {
        image = "gcr.io/${var.project_id}/multimedia-auth-backend:latest"
        
        ports {
          container_port = 5000
        }

        env {
          name  = "NODE_ENV"
          value = "production"
        }

        env {
          name  = "PORT"
          value = "5000"
        }

        env {
          name  = "MONGODB_URI"
          value = "mysql://${google_sql_user.users.name}:${var.db_password}@${google_sql_database_instance.mongodb.connection_name}/${google_sql_database.database.name}"
        }

        env {
          name  = "JWT_SECRET"
          value = var.jwt_secret
        }

        env {
          name  = "IPFS_API_URL"
          value = var.ipfs_api_url
        }

        env {
          name  = "ETHEREUM_RPC_URL"
          value = var.ethereum_rpc_url
        }

        env {
          name  = "MULTIMEDIA_NFT_ADDRESS"
          value = var.multimedia_nft_address
        }

        env {
          name  = "LICENSING_CONTRACT_ADDRESS"
          value = var.licensing_contract_address
        }

        resources {
          limits = {
            cpu    = "1000m"
            memory = "2Gi"
          }
        }
      }
    }
  }

  traffic {
    percent         = 100
    latest_revision = true
  }
}

# IAM policy for Cloud Run
data "google_iam_policy" "noauth" {
  binding {
    role = "roles/run.invoker"
    members = [
      "allUsers",
    ]
  }
}

resource "google_cloud_run_service_iam_policy" "noauth" {
  location = google_cloud_run_service.backend.location
  project  = google_cloud_run_service.backend.project
  service  = google_cloud_run_service.backend.name

  policy_data = data.google_iam_policy.noauth.policy_data
}

# Load Balancer
resource "google_compute_global_forwarding_rule" "default" {
  name       = "multimedia-auth-lb"
  target     = google_compute_target_https_proxy.default.id
  port_range = "443"
}

resource "google_compute_target_https_proxy" "default" {
  name             = "multimedia-auth-https-proxy"
  url_map          = google_compute_url_map.default.id
  ssl_certificates = [google_compute_managed_ssl_certificate.default.id]
}

resource "google_compute_url_map" "default" {
  name            = "multimedia-auth-url-map"
  default_service = google_compute_backend_service.default.id
}

resource "google_compute_backend_service" "default" {
  name        = "multimedia-auth-backend"
  protocol    = "HTTP"
  port_name   = "http"
  timeout_sec = 30

  backend {
    group = google_compute_instance_group_manager.backend.id
  }

  health_checks = [google_compute_health_check.default.id]
}

resource "google_compute_health_check" "default" {
  name               = "multimedia-auth-health-check"
  check_interval_sec = 5
  timeout_sec        = 5
  healthy_threshold  = 2
  unhealthy_threshold = 10

  http_health_check {
    request_path = "/health"
    port         = 5000
  }
}

# Managed SSL Certificate
resource "google_compute_managed_ssl_certificate" "default" {
  name = "multimedia-auth-ssl-cert"

  managed {
    domains = [var.domain_name]
  }
}

# DNS Zone
resource "google_dns_managed_zone" "default" {
  name     = "multimedia-auth-zone"
  dns_name = "${var.domain_name}."
}

# DNS Record
resource "google_dns_record_set" "default" {
  name         = google_dns_managed_zone.default.dns_name
  managed_zone = google_dns_managed_zone.default.name
  type         = "A"
  ttl          = 300

  rrdatas = [google_compute_global_forwarding_rule.default.ip_address]
}

# Cloud Build Trigger
resource "google_cloudbuild_trigger" "build_trigger" {
  name = "multimedia-auth-build"

  github {
    owner = "your-github-username"
    name  = "multimedia-auth-repo"
    push {
      branch = "main"
    }
  }

  filename = "cloudbuild.yaml"
}

# Cloud Build Configuration
resource "google_cloudbuild_trigger" "deploy_trigger" {
  name = "multimedia-auth-deploy"

  github {
    owner = "your-github-username"
    name  = "multimedia-auth-repo"
    push {
      branch = "main"
    }
  }

  substitutions = {
    _SERVICE_NAME = google_cloud_run_service.backend.name
    _REGION       = var.region
  }

  filename = "cloudbuild-deploy.yaml"
}

# Outputs
output "backend_url" {
  value = google_cloud_run_service.backend.status[0].url
}

output "load_balancer_ip" {
  value = google_compute_global_forwarding_rule.default.ip_address
}

output "database_connection_name" {
  value = google_sql_database_instance.mongodb.connection_name
}

output "storage_bucket" {
  value = google_storage_bucket.multimedia_files.name
} 